{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Radio System</p>"},{"location":"guide/api/","title":"Overview","text":"<p>The API is just a simple bindable event for both the server and client, but to make it easier to communicate with the API we have provided API wrappers.</p>"},{"location":"guide/api/#requirements","title":"Requirements","text":"<ul> <li>The API wrapper for either the client or server<sup>1</sup></li> <li>A knowledge on how to code</li> </ul>"},{"location":"guide/api/#support","title":"Support","text":"<p>Our maintainers will provide basic support for API usage, we will not teach you how to code.</p> <p>Client API Wrapper Server API Wrapper</p> <ol> <li> <p>You can download the rbxmx files from GitHub \u21a9</p> </li> </ol>"},{"location":"guide/api/client/","title":"Client Wrapper","text":"<p>Please take a note of where your client API wrapper is located, this guide will assume that the wrapper is in ReplicatedStorage.</p>"},{"location":"guide/api/client/#setting-up","title":"Setting Up","text":"<p>Setting up is pretty simple. Just require the script and call <code>.init()</code>. </p> <ol> <li>Create a <code>LocalScript</code> in <code>StaterGui</code> or in <code>StaterPlayer</code></li> <li>Paste the following code:     <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal clientAPI = require(ReplicatedStorage:WaitForChild(\"Radio System Client API\")).init()\n</code></pre></li> <li>Hit 'Play', check for any errors.</li> </ol> It Errors <ol> <li>Try debugging it yourself.</li> <li>If you can not figure out why, feel free to create a support thread.</li> <li>Remember, be patient, and please understand that the API is meant to be used by those who know how to program.</li> </ol>"},{"location":"guide/api/client/#api-reference","title":"API Reference","text":""},{"location":"guide/api/client/#cleanup","title":"cleanup","text":"<p>The most important function of them all Call this function once you are done with the API, it will clean up all connections for you.  <pre><code>() -&gt; nil\n</code></pre></p>"},{"location":"guide/api/client/#example-usage","title":"Example Usage","text":"<pre><code>clientAPI:cleanup()\n</code></pre>"},{"location":"guide/api/client/#scriptconnection","title":"ScriptConnection","text":"<p>Our version of a <code>RBXMScriptConnection</code>, it just provides a way to disconnect from a function.</p>"},{"location":"guide/api/client/#methods","title":"Methods","text":"<ul> <li><code>disconnect()</code> - Disconnects the function</li> </ul>"},{"location":"guide/api/client/#example-usage_1","title":"Example Usage","text":"<pre><code>local connection = ...\ntask.wait(10)\nconnection:disconnect()\n</code></pre>"},{"location":"guide/api/client/#clientmessagerecieved","title":"clientMessageRecieved","text":"<p>Calls the function whenever we receieve a message from another player or we sent a message. <pre><code>(\n    func: (channelId: number, player: Player, message: string) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/client/#parameters","title":"Parameters","text":"<ul> <li><code>func: (channelId: number, player: Player, message: string) -&gt; nil</code> - a function that accepts a number, Player, and string as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/client/#example-usage_2","title":"Example Usage","text":"<pre><code>local connection = clientAPI:clientMessageRecieved(function(channelId: number, player: Player, message: string)\n    print(channelId, player, message)\nend)\n\ntask.wait(10)\n\nconnection:disconnect()\n</code></pre>"},{"location":"guide/api/client/#systemmessagerecieved","title":"systemMessageRecieved","text":"<p>Calls the function whenever we receieve a message from the system which is usually called by the server API. <pre><code>(\n    func: (channelId: number, message: {\n        text: string,\n        headerText: string?,\n        backgroundColor3: Color3?,\n        icon: string?,\n        iconColor3: Color3?,\n        iconRounded: boolean?,\n        sideText: string?,\n        sideAccent: Color3?,\n    }) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/client/#parameters_1","title":"Parameters","text":"<ul> <li><code>func: (channelId: number, message: ...) -&gt; nil</code> - a function that accepts a number and message as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/client/#example-usage_3","title":"Example Usage","text":"<pre><code>clientAPI:systemMessageRecieved(function(channelId: number, message: {...any})\n    print(channelId, message)\nend)\n</code></pre>"},{"location":"guide/api/client/#panicbuttonactivated","title":"panicButtonActivated","text":"<p>Calls the function whenever we recieve a panic button activation. </p> <p><code>channelId</code> is true if the panic button was activated on all channels. <pre><code>(\n    func: (channelId: number | boolean, player: Player, message: string) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/client/#parameters_2","title":"Parameters","text":"<ul> <li><code>func: (channelId: number | boolean, player: Player, message: string) -&gt; nil</code> - a function that accepts a number or boolean, player, and message as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/client/#example-usage_4","title":"Example Usage","text":"<pre><code>clientAPI:panicButtonActivated(function(channelId: number | boolean, player: Player, message: string)\n    if channelId == true then\n        print(\"Panic Button Activated on all channels\")\n    else\n        print(channelId, player, message)\n    end\nend)\n</code></pre>"},{"location":"guide/api/client/#messagehistoryrecieved","title":"messageHistoryRecieved","text":"<p>Calls the function whenever we recieve a channels history, usually calls whenver the player recieves the GUI. <pre><code>(\n    func: (channelId: number, history: {}) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/client/#parameters_3","title":"Parameters","text":"<ul> <li><code>func: (channelId: number, history: {}) -&gt; nil</code> - a function that accepts a number and table as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/client/#example-usage_5","title":"Example Usage","text":"<pre><code>clientAPI:clientMessageRecieved(function(channelId: number, history: {...any})\n    print(channelId, history)\nend)\n</code></pre>"},{"location":"guide/api/client/#voicerecieve","title":"voiceRecieve","text":"<p>Calls the function whenever any player (including the local player) starts to send voice communications. <pre><code>(\n    func: (channelId: number, player: Player) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/client/#parameters_4","title":"Parameters","text":"<ul> <li><code>func: (channelId: number, player: Player) -&gt; nil</code> - a function that accepts a number and Player as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/client/#example-usage_6","title":"Example Usage","text":"<pre><code>clientAPI:clientMessageRecieved(function(channelId: number, player: Player)\n    print(channelId, player)\nend)\n</code></pre>"},{"location":"guide/api/client/#textactivatechanged","title":"textActivateChanged","text":"<p>Calls the function whenever we the player activated or deactivated the text chat. <pre><code>(\n    func: (active: boolean) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/client/#parameters_5","title":"Parameters","text":"<ul> <li><code>func: (active: boolean) -&gt; nil</code> - a function that accepts a boolean as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/client/#example-usage_7","title":"Example Usage","text":"<pre><code>clientAPI:clientMessageRecieved(function(active: boolean)\n    print(active)\nend)\n</code></pre>"},{"location":"guide/api/client/#voiceactivatechanged","title":"voiceActivateChanged","text":"<p>Calls the function whenever we the player activated or deactivated the voice chat. <pre><code>(\n    func: (active: boolean) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/client/#parameters_6","title":"Parameters","text":"<ul> <li><code>func: (active: boolean) -&gt; nil</code> - a function that accepts a boolean as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/client/#example-usage_8","title":"Example Usage","text":"<pre><code>clientAPI:clientMessageRecieved(function(active: boolean)\n    print(active)\nend)\n</code></pre>"},{"location":"guide/api/client/#getenabled","title":"getEnabled","text":"<p>Returns wether or not the radio is currently enabled <pre><code>(): boolean\n</code></pre></p>"},{"location":"guide/api/client/#example-usage_9","title":"Example Usage","text":"<pre><code>print(clientAPI:getEnabled())\n</code></pre>"},{"location":"guide/api/client/#setenabled","title":"setEnabled","text":"<p>Tells the radio to disable or enable <pre><code>(\n    enabled: boolean\n) -&gt; nil\n</code></pre></p>"},{"location":"guide/api/client/#parameters_7","title":"Parameters","text":"<ul> <li><code>enabled: boolean</code> - a true or false.</li> </ul>"},{"location":"guide/api/client/#example-usage_10","title":"Example Usage","text":"<pre><code>clientAPI:setEnabled(false)\n</code></pre>"},{"location":"guide/api/server/","title":"Server Wrapper","text":"<p>Please take a note of where your server API wrapper is located, this guide will assume that the wrapper is in ServerScriptService.</p>"},{"location":"guide/api/server/#setting-up","title":"Setting Up","text":"<p>Setting up is pretty simple. Just require the script and call <code>.init()</code>. </p> <ol> <li>Create a <code>Script</code></li> <li>Paste the following code:     <pre><code>local ServerScriptService = game:GetService(\"ServerScriptService\")\nlocal serverAPI = require(ServerScriptService:WaitForChild(\"Radio System Server API\")).init()\n</code></pre></li> <li>Hit 'Play', check for any errors.</li> </ol> It Errors <ol> <li>Try debugging it yourself.</li> <li>If you can not figure out why, feel free to create a support thread.</li> <li>Remember, be patient, and please understand that the API is meant to be used by those who know how to program.</li> </ol>"},{"location":"guide/api/server/#api-reference","title":"API Reference","text":""},{"location":"guide/api/server/#cleanup","title":"cleanup","text":"<p>The most important function of them all Call this function once you are done with the API, it will clean up all connections for you.  <pre><code>() -&gt; nil\n</code></pre></p>"},{"location":"guide/api/server/#example-usage","title":"Example Usage","text":"<pre><code>serverAPI:cleanup()\n</code></pre>"},{"location":"guide/api/server/#scriptconnection","title":"ScriptConnection","text":"<p>Our version of a <code>RBXMScriptConnection</code>, it just provides a way to disconnect from a function.</p>"},{"location":"guide/api/server/#methods","title":"Methods","text":"<ul> <li><code>disconnect()</code> - Disconnects the function</li> </ul>"},{"location":"guide/api/server/#example-usage_1","title":"Example Usage","text":"<pre><code>local connection = ...\ntask.wait(10)\nconnection:disconnect()\n</code></pre>"},{"location":"guide/api/server/#receivedclientmessage","title":"receivedClientMessage","text":"<p>Calls the function whenever we receieve a message from a player. <pre><code>(\n    func: (player: Player, message: string, channelId: number) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/server/#parameters","title":"Parameters","text":"<ul> <li><code>func: (player: Player, message: string, channelId: number) -&gt; nil</code> - a function that accepts a Player, string, number as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/server/#example-usage_2","title":"Example Usage","text":"<pre><code>local connection = serverAPI:receivedClientMessage(function(player: Player, message: string, channelId: number)\n    print(player, message, channelId)\nend)\n\ntask.wait(10)\n\nconnection:disconnect()\n</code></pre>"},{"location":"guide/api/server/#receivedactivatevoice","title":"receivedActivateVoice","text":"<p>Calls the function whenever a player tries to use the voice channel. <pre><code>(\n    func: (player: Player, channelId: number) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/server/#parameters_1","title":"Parameters","text":"<ul> <li><code>func: (player: Player, channelId: number) -&gt; nil</code> - a function that accepts a Player and number as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/server/#example-usage_3","title":"Example Usage","text":"<pre><code>serverAPI:receivedActivateVoice(function(player: Player, channelId: number)\n    print(player, channelId)\nend)\n</code></pre>"},{"location":"guide/api/server/#receivedpanic","title":"receivedPanic","text":"<p>Calls the function whenever a player successfully uses the panic button. <pre><code>(\n    func: (player: Player, channelId: number) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/server/#parameters_2","title":"Parameters","text":"<ul> <li><code>func: (player: Player, channelId: number) -&gt; nil</code> - a function that accepts a Player and number as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/server/#example-usage_4","title":"Example Usage","text":"<pre><code>serverAPI:receivedPanic(function(player: Player, channelId: number)\n    print(player, channelId)\nend)\n</code></pre>"},{"location":"guide/api/server/#authorizedclient","title":"authorizedClient","text":"<p>Calls the function whenever the server sends authorized channels to a client. <pre><code>(\n    func: (player: Player, authorizedChannels: {number}) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/server/#parameters_3","title":"Parameters","text":"<ul> <li><code>func: (player: Player, authorizedChannels: {number}) -&gt; nil</code> - a function that accepts a Player and table as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/server/#example-usage_5","title":"Example Usage","text":"<pre><code>serverAPI:clientMessageRecieved(function(player: Player, authorizedChannels: {number})\n    print(player, authorizedChannels)\nend)\n</code></pre>"},{"location":"guide/api/server/#channeladdplayer","title":"channelAddPlayer","text":"<p>Calls the function whenever a channel adds a player to itself. <pre><code>(\n    func: (id: number, player: Player) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/server/#parameters_4","title":"Parameters","text":"<ul> <li><code>func: (id: number, player: Player) -&gt; nil</code> - a function that accepts a numbe and Player as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/server/#example-usage_6","title":"Example Usage","text":"<pre><code>serverAPI:clientMessageRecieved(function(id: number, player: Player)\n    print(id, player)\nend)\n</code></pre>"},{"location":"guide/api/server/#channelremoveplayer","title":"channelRemovePlayer","text":"<p>Calls the function whenever a channel removes a player to itself. <pre><code>(\n    func: (id: number, player: Player) -&gt; nil\n) -&gt; ScriptConnection\n</code></pre></p>"},{"location":"guide/api/server/#parameters_5","title":"Parameters","text":"<ul> <li><code>func: (id: number, player: Player) -&gt; nil</code> - a function that accepts a numbe and Player as its parameters and returns nil.</li> </ul>"},{"location":"guide/api/server/#example-usage_7","title":"Example Usage","text":"<pre><code>serverAPI:clientMessageRecieved(function(id: number, player: Player)\n    print(id, player)\nend)\n</code></pre>"},{"location":"guide/api/server/#createsystemmessage","title":"createSystemMessage","text":"<p>Creates a system message in the specified channel. System messages are not currently stored in channel history. <pre><code>(\n    channelId: number,\n    message: {\n        text: string,\n        headerText: string?,\n        backgroundColor3: Color3?,\n        icon: string?,\n        iconColor3: Color3?,\n        iconRounded: boolean?,\n        sideText: string?,\n        sideAccent: Color3?,\n    }\n) -&gt; nil\n</code></pre></p>"},{"location":"guide/api/server/#parameters_6","title":"Parameters","text":"<ul> <li><code>channelId: number</code> - the channel id to send the message to</li> <li><code>message: ...</code> - the message data to send</li> </ul>"},{"location":"guide/api/server/#example-usage_8","title":"Example Usage","text":"<pre><code>serverAPI:createSystemMessage(1, {\n    text = \"Hello, World!\",\n    sideText = \"test\",\n})\n</code></pre>"},{"location":"guide/api/server/#activateplayersvoice","title":"activatePlayersVoice","text":"<p>Attempts to activate/deactivate a players voice communications <pre><code>(\n    channelId: number,\n    player: Player\n) -&gt; nil\n</code></pre></p>"},{"location":"guide/api/server/#parameters_7","title":"Parameters","text":"<ul> <li><code>channelId: number</code> - the channel id to use</li> <li><code>player: Player</code> - the player to attempt this on</li> </ul>"},{"location":"guide/api/server/#example-usage_9","title":"Example Usage","text":"<pre><code>serverAPI:activatePlayersVoice(1, game.Players.parker02311)\n</code></pre>"},{"location":"setup/","title":"Setup Home","text":"<p>Prefer videos? Check out our YouTube tutorial for a step-by-step guide on how to set up the Radio System.</p>"},{"location":"setup/#overview","title":"Overview","text":"<p>The Radio System is designed to be easy to install and use, however if you have any issues with installation or usage please create a support thread in our Discord.</p>"},{"location":"setup/#requirements","title":"Requirements","text":"<ul> <li>The Roblox model or the latest <code>redon-tech-RADIO-SYSTEM.rbxmx</code><sup>1</sup></li> <li>Teams setup and ready to be used</li> <li>Basic knowledge on how to setup systems</li> </ul> <p>Next: Installing the System</p> <ol> <li> <p>You can download the rbxmx files from GitHub \u21a9</p> </li> </ol>"},{"location":"setup/configuration/","title":"Configuration","text":"<p>This guide is the next part after setting up the system. If you have not done this step please do it before continuing.</p>"},{"location":"setup/configuration/#finding-the-configuration-module","title":"Finding the Configuration module","text":"<p>It is under the provided folder in the ModuleScript called <code>settings</code></p>"},{"location":"setup/configuration/#configuration-explained","title":"Configuration Explained","text":"<p>Now that we have our configuration module we can start configuring it. We will go through each section and setting and explain them.</p>"},{"location":"setup/configuration/#channels","title":"Channels","text":"<p>Configuration for channels.</p>"},{"location":"setup/configuration/#settingschannels","title":"<code>settings.channels</code>","text":"<p>Channels that the system will setup, the format is pretty simple. The first number is the channel id, and the name is the name... </p> <p>Default Value: <pre><code>settings.channels = {\n    [1] = {\n        [\"name\"] = \"Main\",\n    },\n    [2] = {\n        [\"name\"] = \"Tac1\",\n    },\n    [3] = {\n        [\"name\"] = \"Tac2\",\n    },\n    [4] = {\n        [\"name\"] = \"Police\",\n    },\n    [5] = {\n        [\"name\"] = \"Fire\",\n    },\n}\n</code></pre> Format: <pre><code>[id] = {\n    [\"name\"] = \"channelName\",\n},\n</code></pre></p>"},{"location":"setup/configuration/#settingschannelhistory","title":"<code>settings.channelHistory</code>","text":"<p>Controls how much channel history will be stored by the server and sent to players when the recieve the GUI.  This does not change how much history already spawned players will see. </p> <p>Default Value: <pre><code>settings.channelHistory = 100\n</code></pre></p>"},{"location":"setup/configuration/#voice","title":"Voice","text":"<p>Configuration for the voice chat API.</p>"},{"location":"setup/configuration/#settingsvoicetype","title":"<code>settings.voiceType</code>","text":"<p>Sets where the sound of radio voice chat will be played. The possible values are: </p> Value Description player The sound will be played from the character's position. camera The sound will be played from the camera's position. <p>Default Value: <pre><code>settings.voiceType = \"character\"\n</code></pre></p>"},{"location":"setup/configuration/#settingsaudioboost","title":"<code>settings.audioBoost</code>","text":"<p>Sets the audio boost for the radio voice chat. This can only be set to a value between 0 and 3. Because of Roblox, do not complain or open a support thread about this limit, complain to Roblox.</p> <p>Default Value: <pre><code>settings.audioBoost = 1\n</code></pre></p>"},{"location":"setup/configuration/#access","title":"Access","text":"<p>Controls what teams/users have access to what channels.  This entire section follows the same format. </p> <p>Format:  <pre><code>value = {\n    1,2,3,4,5,6,7,8,9, -- Channel IDs\n},\nvalue = true, -- access all channels\nvalue = false, -- access no channels\n</code></pre></p>"},{"location":"setup/configuration/#settingsdefault","title":"<code>settings.default</code>","text":"<p>Simply controls what channels players will have access to when they are not on a team or a user with channels set. </p>"},{"location":"setup/configuration/#settingsteams","title":"<code>settings.teams</code>","text":"<p>Teams access. Format:  <pre><code>[\"teamName\"] = {\n    ids\n},\n</code></pre></p>"},{"location":"setup/configuration/#settingsusers","title":"<code>settings.users</code>","text":"<p>What users have access to. Basically for administration purposes should a user always have access to these channels.  Format:  <pre><code>[123] = { -- UserId, more secure, try to always use these\n    ids\n},\n[\"username\"] = {\n    ids\n},\n</code></pre></p>"},{"location":"setup/configuration/#panic","title":"Panic","text":"<p>Controls the panic button feature.</p>"},{"location":"setup/configuration/#settingspanicbuttonenabled","title":"<code>settings.panicButtonEnabled</code>","text":"<p>Controls if the panic button is enabled. Default Value: <pre><code>settings.panicButtonEnabled = true\n</code></pre></p>"},{"location":"setup/configuration/#settingspanicbehavior","title":"<code>settings.panicBehavior</code>","text":"<p>Controls if the panic button should activate on all channels or only the active channel. Possible values: | Value  | Description                                           | | ------ | ----------------------------------------------------- | | all    | Panic button will activate on all channels            | | active | Panic button will only activate on the active channel | Default Value: <pre><code>settings.panicBehavior = \"all\"\n</code></pre></p>"},{"location":"setup/configuration/#settingsgetpanicmessage","title":"<code>settings.getPanicMessage</code>","text":"<p>A function that returns the message that will be sent when the panic button is pressed.</p> <p>Parameters: - <code>player</code> (Player): The player that pressed the panic button.</p> <p>Returns: Must not return nil. - <code>string</code>: The message that will be sent when the panic button is pressed.</p> <p>Default Value: <pre><code>settings.getPanicMessage = function(player: Player): string\n    return `{player.Name} has activated the panic button!`\nend\n</code></pre></p>"},{"location":"setup/configuration/#settingspaniccooldown","title":"<code>settings.panicCooldown</code>","text":"<p>Controls the cooldown of the panic button in seconds. Default Value: <pre><code>settings.panicCooldown = 30\n</code></pre></p>"},{"location":"setup/configuration/#ui","title":"UI","text":"<p>Configurastion relating to the UI of the radio </p>"},{"location":"setup/configuration/#settingsuiposition","title":"<code>settings.uiPosition</code>","text":"<p>Controls where the UI should be. </p> <p>Possible values:  <code>TopLeft</code>, <code>TopRight</code>, <code>BottomLeft</code>, <code>BottomRight</code> </p> <p>Default Value: <pre><code>settings.uiPosition = \"TopLeft\"\n</code></pre></p>"},{"location":"setup/configuration/#settingsoverrideuiposition","title":"<code>settings.overrideUiPosition</code>","text":"<p>Manually set the UI position, this will override the above setting. Setting to nil allows the above setting to control the position. </p> <p>Note: The UI has a built in padding size of Top 44px, Bottom 4px, Left/Right 8px. </p> <p>Default Value: <pre><code>settings.overrideUiPosition = nil\n</code></pre></p>"},{"location":"setup/configuration/#settingsuisize","title":"<code>settings.uiSize</code>","text":"<p>Allows you to adjust the UI size to fit your game. </p> <p>Note: The UI has a size constraint which can be modified using the settings below. </p> <p>Default Value: <pre><code>settings.uiSize = UDim2.fromScale(0.4, 0.25)\n</code></pre></p>"},{"location":"setup/configuration/#settingsuimaxsize","title":"<code>settings.uiMaxSize</code>","text":"<p>Controls the maxsize of the UI, really only effective when using Scale. Default based off of Roblox. </p> <p>Default Value: <pre><code>settings.uiMaxSize = Vector2.new(475, 275)\n</code></pre></p>"},{"location":"setup/configuration/#settingskeybinds","title":"<code>settings.keybinds</code>","text":"<p>Allows you to change the default keybinds for the radio system. </p> <p>Default Value: <pre><code>settings.keybinds = {\n    text = Enum.KeyCode.T,\n    mic = Enum.KeyCode.Y,\n    hide = Enum.KeyCode.H\n}\n</code></pre></p>"},{"location":"setup/configuration/#settingsaudio","title":"<code>settings.audio</code>","text":"<p>Controls audio played upon certain actions. Set any value to <code>nil</code> or <code>false</code> to disable that sound. </p> <p>The Radio system comes with audio published by parker02311, due to the audio privacy update these audios will not work by default. You can find the audio used in his videos here and republish them yourself. </p> <p>The panic sound is a public audio on the toolbox and should work by default.</p> <p>Actions:</p> Action Description messageRecieved When the player recieves a message in their active channel sideTone When the player tries to activate voice communications while someone else is using the air keyDown When the player presses down the key to activate voice keyUp The exact oppisite of the above panic When the panic button is pressed"},{"location":"setup/configuration/#chat-config","title":"Chat Config","text":""},{"location":"setup/configuration/#settingsoverridewindowenabled","title":"<code>settings.overrideWindowEnabled</code>","text":"<p>When the game uses the new text chat service this option when enabled will override the value for <code>ChatWindowConfiguration.Enabled</code> to be false. </p> <p>This makes it easier to use the system when its UI position is in TopLeft. </p> <p>Default Value: <pre><code>settings.overrideWindowEnabled = true\n</code></pre></p>"},{"location":"setup/configuration/#settingsadditionaltoppadding","title":"<code>settings.additionalTopPadding</code>","text":"<p>Adds additional padding to the top of the chat window when the radio UI is in the TopLeft position.</p> <p>If the radio is not in the TopLeft position, it is recommended to set this value to 0.</p> <p>Default Value: <pre><code>settings.additionalTopPadding = 50\n</code></pre></p>"},{"location":"setup/configuration/#settingsdefaulttextchannel","title":"<code>settings.defaultTextChannel</code>","text":"<p>Controls the default text channel that the radio system will use when the player loses their radio permissions. This should only need to be changed if TextChatService.CreateDefaultTextChannels is set to false.</p> <p>Default Value: <pre><code>settings.defaultTextChannel = \"RBXGeneral\"\n</code></pre></p>"},{"location":"setup/configuration/#developer","title":"DEVELOPER","text":"<p>Best not to touch anything</p>"},{"location":"setup/configuration/#settingsdebug","title":"<code>settings.debug</code>","text":"<p>Touch this if you are using the API, helps a lot with debugging any API issues.</p>"},{"location":"setup/setup/","title":"Setup","text":"<p>Installing is really easy, simply drag and drop the provided folder into <code>ServerScriptService</code>.</p> <p>Make sure you have the <code>VoiceChatService.UseAudioApi</code> property set to <code>Enabled</code>. This is crucial for the Radio System to function properly.</p> <p>Next: Configuration</p>"}]}